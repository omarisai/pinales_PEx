<?xml version="1.0" encoding="UTF-8"?>
<Interface>
  <Name>TU</Name>
  <Description>Interface TU for TimerUnit_LDD generated by Inheritance Wizard</Description>
  <Author />
  <Version>01.000</Version>
  <FileVersion>1</FileVersion>
  <MethodList>
    <Method>
      <TMthdItem>
        <Name>Enable</Name>
        <Symbol>Enable</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Enables the component - it starts the signal generation. Events may be generated (see SetEventMask). The method is not available if the counter can't be disabled/enabled by HW.</Hint>
        <ItemLevel>ADVANCED</ItemLevel>
        <EditLine>false</EditLine>
        <UI_DisplayIn>TABLE_AND_GRAPHICAL_VIEW</UI_DisplayIn>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TError</ReturnType>
        <RetHint>Error code, possible codes:\n  ERR_OK - OK\n  ERR_SPEED - The component does not work in the active clock configuration</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TError #M#_#C#(LDD_TDeviceData *DeviceDataPtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Disable</Name>
        <Symbol>Disable</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Disables the component - it stops signal generation and events calling. The method is not available if the counter can't be disabled/enabled by HW.</Hint>
        <ItemLevel>ADVANCED</ItemLevel>
        <EditLine>false</EditLine>
        <UI_DisplayIn>TABLE_AND_GRAPHICAL_VIEW</UI_DisplayIn>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TError</ReturnType>
        <RetHint>Error code, possible codes:\n  ERR_OK - OK\n  ERR_SPEED - The component does not work in the active clock configuration</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TError #M#_#C#(LDD_TDeviceData *DeviceDataPtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetInputFrequency</Name>
        <Symbol>GetInputFrequency</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Returns current input frequency of the counter in Hz as 32-bit unsigned integer number. This method can be used only if &lt;a href="TimerUnit_LDDProperties.html#InputClock"&gt;"Input clock source"&lt;/a&gt; property is set to "internal".</Hint>
        <ItemLevel>ADVANCED</ItemLevel>
        <EditLine>false</EditLine>
        <UI_DisplayIn>TABLE_AND_GRAPHICAL_VIEW</UI_DisplayIn>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>uint32_t</ReturnType>
        <RetHint>Input frequency</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>uint32_t #M#_#C#(LDD_TDeviceData *DeviceDataPtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetPeriodTicks</Name>
        <Symbol>SetPeriodTicks</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>The method sets timer re-initialization period (in timer ticks). This method is available only if the property &lt;a href="TimerUnit_LDDProperties.html#CounterRestart"&gt;"Counter restart"&lt;/a&gt; is switched to 'on-match' value.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <UI_DisplayIn>TABLE_AND_GRAPHICAL_VIEW</UI_DisplayIn>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TError</ReturnType>
        <RetHint>Error code, possible codes:\n  ERR_OK - OK \n  ERR_PARAM_TICKS - Ticks parameter is out of possible range.\n  ERR_SPEED - The component does not work in the active clock configuration</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Ticks</ParName>
          <ParType>TValueType</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Number of counter ticks before counter re-initialization. Value 0 means maximal period value the same as "free-running mode", e.g. counter overflow or underflow without any explicit re-initialization.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TError #M#_#C#(LDD_TDeviceData *DeviceDataPtr, %'ModuleName'_TValueType Ticks)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ResetCounter</Name>
        <Symbol>ResetCounter</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Resets counter. If counter is counting up then it is set to zero. If counter is counting down then counter is updated to the reload value.&#xD;

The method is not available if HW doesn't allow resetting of the counter.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <UI_DisplayIn>TABLE_AND_GRAPHICAL_VIEW</UI_DisplayIn>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TError</ReturnType>
        <RetHint>Error code, possible codes:\n  ERR_OK - OK \n  ERR_SPEED - The component does not work in the active clock configuration</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TError #M#_#C#(LDD_TDeviceData *DeviceDataPtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
  </MethodList>
  <EventList>
    <Event>
      <TEvntItem>
        <Name>OnCounterRestart</Name>
        <Symbol>OnCounterRestart</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Called if counter overflow/underflow or counter is reinitialized by modulo or compare register matching. OnCounterRestart event and Timer unit must be enabled. See &lt;a href="TimerUnit_LDDMethods.html#SetEventMask"&gt;SetEventMask&lt;/a&gt; and &lt;a href="TimerUnit_LDDMethods.html#GetEventMask"&gt;GetEventMask&lt;/a&gt; methods.&#xD;

This event is available only if a &lt;a href="TimerUnit_LDDProperties.html#IntServiceCounter"&gt;Interrupt&lt;/a&gt; is enabled.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <BoldName>true</BoldName>
        <EditLine>false</EditLine>
        <UI_DisplayIn>TABLE_AND_GRAPHICAL_VIEW</UI_DisplayIn>
        <Description>generate code</Description>
        <Expanded>Yes</Expanded>
        <DefaultValue>true</DefaultValue>
        <DefineSymbol>DEF_UNDEF</DefineSymbol>
        <IfDisabled>setNOTHING</IfDisabled>
        <IsAssembler>true</IsAssembler>
        <Mode>meiAlwReq_!Exist</Mode>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>UserDataPtr</ParName>
          <ParType>LDD_TUserData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the user or RTOS specific data. The pointer passed as the parameter of Init method.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #C#(LDD_TUserData *UserDataPtr)</ANSIC>
        </Declarations>
      </TEvntItem>
    </Event>
  </EventList>
  <Registration>
    <Template>TimerUnit_LDD</Template>
  </Registration>
  <UserTypes>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TUserData</Name>
      <Hint>Pointer to this type specifying the user or RTOS specific data will be passed as an event or callback parameter.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>/* Pointer to this type specifying the user or RTOS specific data will be passed as an event or callback parameter. */\n</PreparedHint>
      <Type />
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TDeviceData</Name>
      <Hint>Pointer to this type specifying the private component state information and data to be passed as a parameter to every component method. LDD global type (not specific for component and component instance)</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>/* Pointer to this type specifying the private component state information and data to be passed as a parameter to every component method. LDD global type (not specific for component and component instance) */\n</PreparedHint>
      <Type />
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TEventMask</Name>
      <Hint>Event mask type</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>/* Event mask type */\n</PreparedHint>
      <Type />
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TError</Name>
      <Hint>Error type</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>/* Error type */\n</PreparedHint>
      <Type />
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TimerUnit_TOutAction</Name>
      <Hint>Output action type (flip-flop action on overrun or compare match)</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>OUTPUT_NONE\\\n
OUTPUT_TOGGLE\\\n
OUTPUT_CLEAR\\\n
OUTPUT_SET /* Output action type (flip-flop action on overrun or compare match) */\n</PreparedHint>
      <Type>OUTPUT_NONE\\\n
OUTPUT_TOGGLE\\\n
OUTPUT_CLEAR\\\n
OUTPUT_SET</Type>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TPinMask</Name>
      <Hint>Pin mask type</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>/* Pin mask type */\n</PreparedHint>
      <Type />
    </Type>
    <Type>
      <UsrType>TRetypeType</UsrType>
      <Name>TValueType</Name>
      <Hint>Type for data parameters of methods. 32bit is maximum. See also property &lt;a href="TimerUnit_LDDProperties.html#ValueType"&gt;Value type&lt;/a&gt;.</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>typedef uint32_t %'ModuleName'_TValueType ;/* Type for data parameters of methods. 32bit is maximum. See also property &lt;a href="TimerUnit_LDDProperties.html#ValueType"&gt;Value type&lt;/a&gt;. */\n</PreparedHint>
      <Type>uint32_t</Type>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TimerUnit_TEdge</Name>
      <Hint>Input edge type.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>EDGE_NONE\\\n
EDGE_RISING\\\n
EDGE_FALLING\\\n
EDGE_BOTH /* Input edge type. */\n</PreparedHint>
      <Type>EDGE_NONE\\\n
EDGE_RISING\\\n
EDGE_FALLING\\\n
EDGE_BOTH</Type>
    </Type>
    <Type>
      <UsrType>TRetypeType</UsrType>
      <Name>TClockList</Name>
      <Hint>Type for list of predefined timings.</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>typedef uint8_t %'ModuleName'_TClockList ;/* Type for list of predefined timings. */\n</PreparedHint>
      <Type>uint8_t</Type>
    </Type>
    <Type>
      <UsrType>TRetypeType</UsrType>
      <Name>uint8_t</Name>
      <Hint />
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>typedef byte uint8_t ;\n</PreparedHint>
      <Type>char</Type>
    </Type>
    <Type>
      <UsrType>TRetypeType</UsrType>
      <Name>uint16_t</Name>
      <Hint />
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>typedef word uint16_t ;\n</PreparedHint>
      <Type>char</Type>
    </Type>
    <Type>
      <UsrType>TRetypeType</UsrType>
      <Name>uint32_t</Name>
      <Hint />
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>typedef dword uint32_t ;\n</PreparedHint>
      <Type>char</Type>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TDeviceData*</Name>
      <Hint>Pointer to this type specifying the private component state information and data to be passed as a parameter to every component method.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>/* Pointer to this type specifying the private component state information and data to be passed as a parameter to every component method. */\n</PreparedHint>
      <Type />
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TClockConfiguration</Name>
      <Hint>CPU clock configuration type. Index of the pre-configured clock configuration in the CPU component.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>/* CPU clock configuration type. Index of the pre-configured clock configuration in the CPU component. */\n</PreparedHint>
      <Type />
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TDriverOperationMode</Name>
      <Hint>Driver operation mode type.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>/* Driver operation mode type. */\n</PreparedHint>
      <Type />
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TCallback</Name>
      <Hint>Callback type used for definition of callback functions.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>/* Callback type used for definition of callback functions.  */\n</PreparedHint>
      <Type />
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TDriverState</Name>
      <Hint>Driver state type.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>/* Driver state type.   */\n</PreparedHint>
      <Type />
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TimerUnit_TCounterDirection</Name>
      <Hint>Direction of counting</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>DIR_UP\\\n
DIR_DOWN /* Direction of counting */\n</PreparedHint>
      <Type>DIR_UP\\\n
DIR_DOWN</Type>
    </Type>
    <Type>
      <UsrType>TRetypeType</UsrType>
      <Name>LDD_TimerUnit_Tfloat</Name>
      <Hint>Float type</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>typedef float LDD_TimerUnit_Tfloat ;/* Float type */\n</PreparedHint>
      <Type>float</Type>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TCallbackParam</Name>
      <Hint>Callback parameter type used for callback functions.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>/* Callback parameter type used for callback functions.  */\n</PreparedHint>
      <Type />
    </Type>
  </UserTypes>
</Interface>

